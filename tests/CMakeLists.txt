if (APPLE)
    include_directories(/opt/homebrew/Cellar)
    include_directories(/opt/homebrew/include)
    find_package(TinyXML2 REQUIRED)
endif()

find_package(Benchmark)
find_package(OpenSSL REQUIRED)
find_package(spdlog REQUIRED)

find_package(GTest)
if (GTEST_FOUND)
    message("Found gtest")
    include_directories(${GTEST_INCLUDE_DIRS})
else()
    message("taking included gtest")
    ADD_SUBDIRECTORY(googletest-release-1.8.0)
    include_directories(${gtest_SOURCE_DIR}/lib/include ${gtest_SOURCE_DIR}/event_manager/include ${gtest_SOURCE_DIR})
endif()

enable_testing()

function(fixlib_test test_name)
    set(TEST_EXECUTABLE run_${test_name})
    set(TEST_SOURCE ${test_name}.cc)

    add_executable(${TEST_EXECUTABLE} ${TEST_SOURCE})
    # target_link_libraries(${TEST_EXECUTABLE} gtest gtest_main spdlog::spdlog_header_only)
    if (APPLE)
        target_link_libraries(${TEST_EXECUTABLE} PRIVATE  GTest::gtest_main spdlog::spdlog_header_only fixlib tinyxml2::tinyxml2 OpenSSL::SSL event_manager)
    elseif(UNIX AND NOT APPLE)    
        target_link_libraries(${TEST_EXECUTABLE} gtest gtest_main spdlog::spdlog_header_only fixlib tinyxml2 OpenSSL::SSL event_manager)
    endif()
    target_include_directories(${TEST_EXECUTABLE} PRIVATE ../lib/include ../lib/versions)
    add_test(${test_name} ${TEST_EXECUTABLE})
endfunction()

function(fixlib_bench bench_name)
    if (BENCHMARK_FOUND)
        set(BENCH_EXECUTABLE run_${bench_name})
        set(BENCH_SOURCE ${bench_name}.cc)

        add_executable(${BENCH_EXECUTABLE} ${BENCH_SOURCE})
        #target_link_libraries(${BENCH_EXECUTABLE} benchmark pthread spdlog::spdlog_header_only)
        if (APPLE)
            target_link_libraries(${BENCH_EXECUTABLE} benchmark pthread spdlog::spdlog_header_only fixlib tinyxml2::tinyxml2 OpenSSL::SSL event_manager)
        elseif(UNIX AND NOT APPLE)    
            target_link_libraries(${BENCH_EXECUTABLE} benchmark pthread spdlog::spdlog_header_only fixlib tinyxml2::tinyxml2 OpenSSL::SSL event_manager)
        endif()
        target_include_directories(${BENCH_EXECUTABLE} PRIVATE ../lib/include ../lib/versions)
    endif()
endfunction()

fixlib_test(message_test)
fixlib_test(session_test)

add_executable(run_bench_test bench_test.cc)
# configure_file(${CMAKE_SOURCE_DIR}/tests/data/fix42.log ${CMAKE_CURRENT_BINARY_DIR}/data/fix42.log COPYONLY)

#fixlib_bench(serialize_bench)
#fixlib_bench(parse_bench)
