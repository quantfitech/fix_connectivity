#include "gtest/gtest.h"
#include "logger.hpp"
#include "fix_message.hpp"
#include "client_connection.hpp"
#include "v50sp2/messages.hpp"

using namespace qffixlib;

class MockConnectionInterface : public ConnectionInterface {
public:
    virtual ~MockConnectionInterface() {};

    void onConnected() override {}
    void onDisconnected() override {}
    void onMessage(const MsgChars&, int, const char*, std::size_t) override {}
};


void replace_substring_with_char(std::string& str, const std::string& substr, char replacement) {
    size_t pos = 0; // Start searching from the beginning of the string
    while ((pos = str.find(substr, pos)) != std::string::npos) {
        // Replace the substring with the single character
        str.replace(pos, substr.length(), 1, replacement);
        pos += 1; // Move past the replacement character
    }
}

TEST(message_test, parse_w_coinbase)
{
    std::string msg = "8=FIXT.1.1x019=505x0135=Wx0149=CBINTLMDx0156=pv3hnDiPUkJrGS5Kx0134=5x0150=TESTx0152=20250227-13:18:36.855151x01369=4x01262=unique_market_data_idx0155=GIGA-PERPx01167=PERPx01268=8x01269=3x01270=0.0203455x0160=20250227-13:18:36.085266x01269=mx01270=0.02135x0160=20250227-13:18:36.085266x01269=gx01270=0.02135x0160=20250227-13:18:36.085266x01269=hx01270=0.01933x0160=20250227-13:18:36.085266x01269=px01270=0.002x0160=20250227-13:18:36.085266x01269=fx01270=0.001956x0160=20250227-13:00:00.000012x01269=6x01270=0.02132x0160=20250227-13:15:00.610000x01269=Cx01271=41644x0160=20250225-22:26:43.054204x0110=045x01";
    replace_substring_with_char(msg, "x01", '\x01');
    Header header;
    v50sp2::Message::MarketDataSnapshot snapshot(&header);
    TokenIterator it(msg.data(), msg.length());
    snapshot.deserialize(it);
     auto symbol = snapshot.get<FIX::Tag::Symbol>();
    auto groups = snapshot.getGroups<FIX::Tag::NoMDEntries>();
    LOG_DEBUG("recv w {} groups {}", symbol, groups.size());
    for(const auto& group: groups) {
        auto type = group. template get<FIX::Tag::MDEntryType>();
        if (type == '0' || type == '1') {
            auto level = group. template get<FIX::Tag::MDPriceLevel>();
            auto px = group. template get<FIX::Tag::MDEntryPx>();
            auto size = group. template get<FIX::Tag::MDEntrySize>();
            auto tstamp = group. template get<FIX::Tag::TransactTime>();
            EXPECT_EQ(level, 1);
            EXPECT_EQ(px, 1);
            break;
            
        }
    }
}


TEST(message_test, parse_w_coinbase_bid_present)
{
    std::string msg = "8=FIXT.1.1x019=545x0135=Wx0149=CBINTLMDx0156=pv3hnDiPUkJrGS5Kx0134=30x0150=TESTx0152=20250227-14:44:23.217061x01369=4x01262=unique_market_data_idx0155=IP-PERPx01167=PERPx01268=9x01269=0x01270=1x01271=500x0160=20250225-22:57:42.915261x011023=1x01269=3x01270=1.00009x0160=20250227-14:44:00.000000x01269=mx01270=1.00009x0160=20250227-14:44:00.000000x01269=gx01270=1.05009x0160=20250227-14:44:00.000000x01269=hx01270=0.95009x0160=20250227-14:44:00.000000x01269=px01270=0x0160=20250227-14:44:00.000000x01269=fx01270=0x0160=20250227-14:00:00.000010x01269=6x01270=1.00009x0160=20250227-14:40:00.640000x01269=Cx01271=1051x0160=20250225-21:50:42.487655x0110=161x01";
    replace_substring_with_char(msg, "x01", '\x01');
    Header header;
    v50sp2::Message::MarketDataSnapshot snapshot(&header);
    TokenIterator it(msg.data(), msg.length());
    snapshot.deserialize(it);
    auto symbol = snapshot.get<FIX::Tag::Symbol>();
    auto groups = snapshot.getGroups<FIX::Tag::NoMDEntries>();
    LOG_DEBUG("recv w {} groups {}", symbol, groups.size());
    for(const auto& group: groups) {
        auto type = group. template get<FIX::Tag::MDEntryType>();
        if (type == '0' || type == '1') {
            auto level = group. template get<FIX::Tag::MDPriceLevel>();
            auto px = group. template get<FIX::Tag::MDEntryPx>();
            auto size = group. template get<FIX::Tag::MDEntrySize>();
            auto tstamp = group. template get<FIX::Tag::TransactTime>();
            
            EXPECT_EQ(level, 1);
            EXPECT_EQ(px, 1);
            break;
        }
    }
    EXPECT_TRUE(snapshot.mTrailer.isSet);
}


TEST(message_test, security_list_parse)
{
    std::string msg = "8=FIXT.1.1x019=5092x0135=yx0149=CBINTLMDx0156=pv3hnDiPUkJrGS5Kx0134=3x0150=TESTx0152=20250228-09:21:39.015093x01369=2x01320=unique_request_idx01322=44x01560=0x01393=32x01893=Nx01146=20x0155=GIGA-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.00001x01898=0.05x0121000=0.3x01870=6x01871=41x01872=131128.4x01871=40x01872=3225.941636x01871=42x01872=96778.24908x01871=43x01872=3933852.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=77805874x01970=400000x01561=1x011682=17x0155=KAS-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.00001x01898=0.05x0121000=0.3x01870=6x01871=41x01872=83083.4x01871=40x01872=7804.887313000001x01871=42x01872=78048.87313x01871=43x01872=830834.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=36730945x01970=400000x01561=1x011682=17x0155=BTC-USDCx01167=FXSPOTx01762=STANDARDx01231=1x01969=0.01x01898=1x0121000=1x01870=6x01871=41x01872=2145.33517x01871=40x01872=2.060709623785073E8x01871=42x01872=6.182128871355219E9x01871=43x01872=64360.0551x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=0x01561=0.00001x011682=17x0155=1000TOSHI-PERPx01167=PERPx01762=STANDARDx01231=1000x01969=0.00001x01898=0.05x0121000=0.3x01870=6x01871=41x01872=9311.166666666666x01871=40x01872=6104.751993666667x01871=42x01872=183142.55981x01871=43x01872=279335.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=1628001x01970=400000x01561=1x011682=17x0155=EIGEN-PERPx01167=PERPx01762=PRE_LAUNCHx01231=1x01969=0.001x01898=0.5x0121000=0.5x01870=6x01871=41x01872=61.5x01871=40x01872=452.5131x01871=42x01872=13575.393x01871=43x01872=1845.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=1x011140=10638.3x01561=0.01x011682=17x0155=HNT-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.0001x01898=0.05x0121000=0.3x01870=6x01871=41x01872=3528.176470588235x01871=40x01872=12594.217770588235x01871=42x01872=214101.7021x01871=43x01872=59979.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=1156069.3x01970=400000x01561=0.1x011682=17x0155=OP-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.001x01898=0.1x0121000=0.3x01870=6x01871=41x01872=3382.9666666666667x01871=40x01872=3763.2237333333333x01871=42x01872=112896.712x01871=43x01872=101489.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=15852.8x01561=0.1x011682=17x0155=ETH-USDCx01167=FXSPOTx01762=STANDARDx01231=1x01969=0.01x01898=1x0121000=1x01870=6x01871=41x01872=2137.63582x01871=40x01872=5800451.310392367x01871=42x01872=1.74013539311771E8x01871=43x01872=64129.0746x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=0x01561=0.0001x011682=17x0155=ETC-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.01x01898=0.1x0121000=0.3x01870=6x01871=41x01872=749.5533333333333x01871=40x01872=15325.997433333334x01871=42x01872=459779.923x01871=43x01872=22486.6x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=15852.89x01561=0.01x011682=17x0155=1000PEPE-PERPx01167=PERPx01762=STANDARDx01231=1000x01969=0.000001x01898=0.1x0121000=0.5x01870=6x01871=41x01872=13808.666666666666x01871=40x01872=127.43312233333333x01871=42x01872=3822.99367x01871=43x01872=414260.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=14324120x01561=10x011682=17x0155=DOGE-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.00001x01898=0.4x0121000=0.4x01870=6x01871=41x01872=32759.966666666667x01871=40x01872=8182.677701333333x01871=42x01872=245480.33104x01871=43x01872=982799.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=641848x01561=1x011682=17x0155=ETH-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.01x01898=0.2x0121000=0.2x01870=6x01871=41x01872=1411.67187x01871=40x01872=4033061.0310667x01871=42x01872=1.20991830932001E8x01871=43x01872=42350.1561x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=500x01970=70000000x01561=0.0001x011682=17x0155=W-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.0001x01898=0.1x0121000=0.5x01870=6x01871=41x01872=16349.133333333333x01871=40x01872=2531.211166666667x01871=42x01872=75936.335x01871=43x01872=490474.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=58823.5x01561=0.1x011682=17x0155=B3-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.000001x01898=0.05x0121000=0.3x01870=6x01871=41x01872=50000.0x01871=40x01872=295.0x01871=42x01872=590.0x01871=43x01872=100000.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=613873542x01970=400000x01561=1x011682=17x0155=AXS-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.0001x01898=0.05x0121000=0.3x01870=6x01871=41x01872=2120.28x01871=40x01872=8527.741944000001x01871=42x01872=213193.5486x01871=43x01872=53007.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=2366863.9x01970=400000x01561=0.1x011682=17x0155=ARB-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.0001x01898=0.1x0121000=0.3x01870=6x01871=41x01872=11024.1x01871=40x01872=5040.6357100000005x01871=42x01872=151219.0713x01871=43x01872=330723.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=231481.4x01561=0.1x011682=17x0155=EGLD-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.01x01898=0.05x0121000=0.3x01870=6x01871=41x01872=616.5848000000001x01871=40x01872=13373.625936x01871=42x01872=334340.6484x01871=43x01872=15414.62x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=435255.72x01970=400000x01561=0.01x011682=17x0155=TRUMP-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.01x01898=0.05x0121000=0.3x01870=6x01871=41x01872=612.904x01871=40x01872=9851.500429999998x01871=42x01872=295545.0129x01871=43x01872=18387.12x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=6215.04x01561=0.01x011682=17x0155=VIRTUAL-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.0001x01898=0.05x0121000=0.3x01870=6x01871=41x01872=1000.0x01871=40x01872=1080.0x01871=42x01872=2160.0x01871=43x01872=2000.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=3809523.8x01970=400000x01561=0.1x011682=17x0155=COIN50-PERPx01167=PERPx01762=STANDARDx01231=1x01969=0.01x01898=0.05x0121000=0.3x01870=6x01871=41x01872=0.0x01871=40x01872=0.0x01871=42x01872=0.0x01871=43x01872=0.0x01871=44x01872=0.0x01871=45x01872=0.0x0115=USDCx01562=10x011140=3125x01561=0.001x011682=2x0110=218x01";
    replace_substring_with_char(msg, "x01", '\x01');
    Header header;
    v50sp2::Message::SecurityList snapshot(&header);
    TokenIterator it(msg.data(), msg.length());
    snapshot.deserialize(it);

    EXPECT_TRUE(snapshot.mTrailer.isSet);
}

TEST(message_test, handle_incomming_data)
{
    std::shared_ptr<MockConnectionInterface> ci = std::make_shared<MockConnectionInterface>();
    std::shared_ptr<EventManager> em = std::make_shared<EventManager>();
    ClientConnection connection(ci, nullptr, em);

    EXPECT_EQ(connection.extractMessage(), false);

    std::string msg = "8=FIXT.1.1x019=109x0135=Ax0149=CBINTLMDx0156=pv3hnDiPUkJrGS5Kx0134=1x0150=TESTx0152=20250227-16:40:56.037737x01369=1x0198=0x01108=30x01141=Yx011137=9x0110=086x01";
    replace_substring_with_char(msg, "x01", '\x01');
    connection.provideData(msg);

     EXPECT_EQ(connection.extractMessage(), false);

}
