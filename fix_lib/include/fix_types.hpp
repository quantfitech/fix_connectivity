#ifndef FIX_TYPES_HPP
#define FIX_TYPES_HPP

#include "fix_field.hpp"

  namespace qffixlib {

    #define SOH '\x01'
    #define TAG_VALUE_SEP '='

    
    namespace Types
    {
        using Account = FieldT<1, std::string>;
        using AdvId = FieldT<2, std::string>;
        using AdvRefID = FieldT<3, std::string>;
        using AdvSide = FieldT<4, char>;
        using AdvTransType = FieldT<5, std::string>;
        using AvgPx = FieldT<6, double>;
        using BeginSeqNo = FieldT<7, int64_t>;
        using BeginString = FieldT<8, std::string>;
        using BodyLength = FieldT<9, std::string>;
        using CheckSum = FieldT<10, std::string>;
        using ClOrdID = FieldT<11, std::string>;
        using Commission = FieldT<12, FIX::Amt>;
        using CommType  = FieldT<13, char>;
        using CumQty = FieldT<14, FIX::Qty>;
        using Currency = FieldT<15, std::string>;
        using EndSeqNo = FieldT<16, int64_t>;
        using ExecID  = FieldT<17, std::string>;
        using ExecInst = FieldT<18, FIX::MultipleValueString>;
        using ExecRefID = FieldT<19, std::string>;
        using ExecTransType = FieldT<20, char>;
        using HandlInst = FieldT<21, char>;
        using IDSource = FieldT<22, std::string>;
        using IOIid = FieldT<23, std::string>;
        using IOIQltyInd = FieldT<25, char>;
        using IOIRefID = FieldT<26, std::string>;
        using IOIShares = FieldT<27, std::string>;
        using IOITransType = FieldT<28, char>;
        using LastCapacity = FieldT<29, char>;
        using LastMkt = FieldT<30, std::string>;
        using LastPx = FieldT<31, FIX::Price>;
        using LastShares = FieldT<32, FIX::Qty>;
        using LinesOfText = FieldT<33, int64_t>;
        using MsgSeqNum = FieldT<34, int64_t>;
        using MsgType = FieldT<35, std::string>;
        using NewSeqNo = FieldT<36, int64_t>;
        using OrderID = FieldT<37, std::string>;
        using OrderQty = FieldT<38, FIX::Qty>;
        using OrdStatus = FieldT<39, char>;
        using OrdType = FieldT<40, char>;
        using OrigClOrdID = FieldT<41, std::string>;
        using OrigTime  = FieldT<42, FIX::UTCTimestamp>;
        using PossDupFlag = FieldT<43, bool>;
        using Price = FieldT<44, double>;
        using RefSeqNum = FieldT<45, int64_t>;
        using RelatdSym = FieldT<46, std::string>;
        using Rule80A = FieldT<47, char>;
        using SecurityID = FieldT<48, std::string>;
        using SenderCompID = FieldT<49, std::string>;
        using SenderSubID = FieldT<50, std::string>;
        using SendingTime = FieldT<52, std::string>;
        using Shares = FieldT<53, double>;
        using Side = FieldT<54, char>;
        using Symbol = FieldT<55, std::string>;
        using TargetCompID = FieldT<56, std::string>;
        using TargetSubID = FieldT<57, std::string>;
        using Text = FieldT<58, std::string>;
        using TimeInForce = FieldT<59, char>;
        using TransactTime = FieldT<60, FIX::UTCTimestamp>;
        using Urgency = FieldT<61, char>;
        using ValidUntilTime = FieldT<62, FIX::UTCTimestamp>;
        using SettlmntTyp = FieldT<63, char>;
        using FutSettDate = FieldT<64, FIX::LocalMktDate>;
        using SymbolSfx = FieldT<65, std::string>;
        using ListID = FieldT<66, std::string>;
        using ListSeqNo = FieldT<67, int64_t>;
        using TotNoOrders = FieldT<68, int64_t>;
        using ListExecInst = FieldT<69, std::string>;
        using AllocID = FieldT<70, std::string>;
        using AllocTransType = FieldT<71, char>;
        using RefAllocID = FieldT<72, std::string>;
        using NoOrders = FieldT<73, int64_t>;
        using AvgPrxPrecision = FieldT<74, int64_t>;
        using TradeDate = FieldT<75, FIX::LocalMktDate>;
        using ExecBroker = FieldT<76, std::string>;
        using OpenClose = FieldT<77, char>;
        using NoAllocs = FieldT<78, int64_t>;
        using AllocAccount = FieldT<79, std::string>;
        using AllocShares = FieldT<80, FIX::Qty>;
        using ProcessCode = FieldT<81, char>;
        using NoRpts = FieldT<82, int64_t>;
        using RptSeq = FieldT<83, int64_t>;
        using CxlQty = FieldT<84, FIX::Qty>;
        using AllocStatus = FieldT<87, int64_t>;
        using AllocRejCode = FieldT<88, int64_t>;
        using SecureDataLen = FieldT<90, int64_t>;
        using SecureData = FieldT<91, FIX::Data>;
        using BrokerOfCredit = FieldT<92, std::string>;
        using EmailType = FieldT<94, char>;
        using RawDataLength = FieldT<95, int64_t>;
        using RawData = FieldT<96, FIX::Data>;
        using PossResend = FieldT<97, bool>;
        using EncryptMethod = FieldT<98, int64_t>;
        using StopPx = FieldT<99, FIX::Price>;
        using ExDestination = FieldT<100, std::string>;
        using CxlRejReason = FieldT<102, int64_t>;
        using OrdRejReason = FieldT<103, int64_t>;
        using IOIQualifier = FieldT<104, char>;
        using WaveNo = FieldT<105, std::string>;
        using Issuer = FieldT<106, std::string>;
        using SecurityDesc = FieldT<107, std::string>;
        using HeartBtInt = FieldT<108, int64_t>;
        using ClientID = FieldT<109, std::string>;
        using MinQty = FieldT<110, FIX::Qty>;
        using MaxFloor = FieldT<111, FIX::Qty>;
        using TestReqID = FieldT<112, std::string>;
        using ReportToExch = FieldT<113, bool>;
        using LocateReqd = FieldT<114, bool>;
        using OnBehalfOfCompID = FieldT<115, std::string>;
        using OnBehalfOfSubID = FieldT<116, std::string>;
        using QuoteID = FieldT<117, std::string>;
        using NetMoney = FieldT<118, FIX::Amt>;
        using SettlCurrAmt = FieldT<119, double>;
        using SettlCurrency = FieldT<120, std::string>;
        using ForexReq = FieldT<121, bool>;
        using OrigSendingTime = FieldT<122, FIX::UTCTimestamp>;
        using GapFillFlag = FieldT<123, bool>;
        using NoExecs = FieldT<124, int64_t>;
        using ExpireTime = FieldT<126, FIX::UTCTimestamp>;
        using DKReason = FieldT<127, char>;
        using DeliverToCompID = FieldT<128, std::string>;
        using DeliverToSubID = FieldT<129, std::string>;
        using IOINaturalFlag = FieldT<130, bool>;
        using QuoteReqID = FieldT<131, std::string>;
        using BidPx = FieldT<132, FIX::Price>;
        using OfferPx = FieldT<133, FIX::Price>;
        using BidSize = FieldT<134, FIX::Qty>;
        using OfferSize = FieldT<135, FIX::Qty>;
        using NoMiscFees = FieldT<136, int64_t>;
        using MiscFeeAmt = FieldT<137, FIX::Amt>;
        using MiscFeeCurr = FieldT<138, std::string>;
        using MiscFeeType = FieldT<139, char>;
        using PrevClosePx = FieldT<140, FIX::Price>;
        using ResetSeqNumFlag = FieldT<141, bool>;
        using SenderLocationID = FieldT<142, std::string>;
        using TargetLocationID = FieldT<143, std::string>;
        using OnBehalfOfLocationID = FieldT<144, std::string>;
        using DeliverToLocationID = FieldT<145, std::string>;
        using NoRelatedSym = FieldT<146, int64_t>;
        using Subject = FieldT<147, std::string>;
        using Headline = FieldT<148, std::string>;
        using URLLink = FieldT<149, std::string>;
        using ExecType = FieldT<150, char>;
        using LeavesQty = FieldT<151, double>;
        using CashOrderQty = FieldT<152, FIX::Qty>;
        using AllocAvgPx = FieldT<153, FIX::Price>;
        using AllocNetMoney = FieldT<154, FIX::Amt>;
        using SettlCurrFxRate = FieldT<155, double>;
        using SettlCurrFxRateCalc = FieldT<156, char>;
        using NumDaysInterest = FieldT<157, int64_t>;
        using AccruedInterestRate = FieldT<158, double>;
        using AccruedInterestAmt = FieldT<159, FIX::Amt>;
        using SettlInstMode = FieldT<160, char>;
        using AllocText = FieldT<161, std::string>;
        using SettlInstID = FieldT<162, std::string>;
        using SettlInstTransType = FieldT<163, char>;
        using EmailThreadID = FieldT<164, std::string>;
        using SettlInstSource = FieldT<165, char>;
        using SettlLocation = FieldT<166, std::string>;
        using SecurityType = FieldT<167, std::string>;
        using EffectiveTime = FieldT<168, FIX::UTCTimestamp>;
        using StandInstDbType = FieldT<169, int64_t>;
        using StandInstDbName = FieldT<170, std::string>;
        using StandInstDbID = FieldT<171, std::string>;
        using SettlDeliveryType = FieldT<172, int64_t>;
        using SettlDepositoryCode = FieldT<173, std::string>;
        using SettlBrkrCode = FieldT<174, std::string>;
        using SettlInstCode = FieldT<175, std::string>;
        using SecuritySettlAgentName = FieldT<176, std::string>;
        using SecuritySettlAgentCode = FieldT<177, std::string>;
        using SecuritySettlAgentAcctNum = FieldT<178, std::string>;
        using SecuritySettlAgentAcctName = FieldT<179, std::string>;
        using SecuritySettlAgentContactName = FieldT<180, std::string>;
        using SecuritySettlAgentContactPhone = FieldT<181, std::string>;
        using CashSettlAgentName = FieldT<182, std::string>;
        using CashSettlAgentCode = FieldT<183, std::string>;
        using CashSettlAgentAcctNum = FieldT<184, std::string>;
        using CashSettlAgentAcctName = FieldT<185, std::string>;
        using CashSettlAgentContactName = FieldT<186, std::string>;
        using CashSettlAgentContactPhone = FieldT<187, std::string>;
        using BidSpotRate = FieldT<188, FIX::Price>;
        using BidForwardPoints = FieldT<189, FIX::Price>;
        using OfferSpotRate = FieldT<190, FIX::Price>;
        using OfferForwardPoints = FieldT<191, FIX::Price>;
        using OrderQty2 = FieldT<192, FIX::Qty>;
        using FutSettDate2 = FieldT<193, FIX::LocalMktDate>;
        using LastSpotRate = FieldT<194, double>;
        using LastForwardPoints = FieldT<195, double>;
        using AllocLinkID = FieldT<196, std::string>;
        using AllocLinkType = FieldT<197, int64_t>;
        using SecondaryOrderID = FieldT<198, std::string>;
        using NoIOIQualifiers = FieldT<199, int64_t>;
        //using MaturityMonthYear = FieldT<200, FIX::MonthYear>;
        using PutOrCall = FieldT<201, int64_t>;
        using StrikePrice = FieldT<202, double>;
        using CoveredOrUncovered = FieldT<203, int64_t>;
        using CustomerOrFirm = FieldT<204, int64_t>;
        //using MaturityDay = FieldT<205, FIX::DayOfMonth>;
        using OptAttribute = FieldT<206, char>;
        using SecurityExchange = FieldT<207, std::string>;
        using NotifyBrokerOfCredit = FieldT<208, bool>;
        using AllocHandlInst = FieldT<209, int64_t>;
        using MaxShow = FieldT<210, FIX::Qty>;
        using PegDifference = FieldT<211, FIX::Price>;
        using XmlDataLen = FieldT<212, int64_t>;
        using XmlData = FieldT<213, FIX::Data>;
        using SettlInstRefID = FieldT<214, std::string>;
        using NoRoutingIDs = FieldT<215, int64_t>;
        using RoutingType = FieldT<216, int64_t>;
        using RoutingID = FieldT<217, std::string>;
        using SpreadToBenchmark = FieldT<218, double>;
        using Benchmark = FieldT<219, char>;
        using CouponRate = FieldT<223, double>;
        using CouponPaymentDate = FieldT<224, FIX::LocalMktDate>;
        using IssueDate = FieldT<225, FIX::LocalMktDate>;
        using RepurchaseTerm = FieldT<226, int64_t>;
        using RepurchaseRate = FieldT<227, double>;
        using Factor = FieldT<228, double>;
        using ContractMultiplier = FieldT<231, double>;
        using RepoCollateralSecurityType = FieldT<239, int64_t>;
        using RedemptionDate = FieldT<240, FIX::LocalMktDate>;
        using UnderlyingCouponPaymentDate = FieldT<241, FIX::LocalMktDate>;
        using UnderlyingIssueDate = FieldT<242, FIX::LocalMktDate>;
        using UnderlyingRepoCollateralSecurityType = FieldT<243, int64_t>;
        using UnderlyingRepurchaseTerm  = FieldT<244, int64_t>;
        using UnderlyingRepurchaseRate = FieldT<245, double>;
        using UnderlyingFactor = FieldT<246, double>;
        using LegCouponPaymentDate = FieldT<248, FIX::LocalMktDate>;
        using UnderlyingRedemptionDate = FieldT<247, FIX::LocalMktDate>;
        using LegIssueDate = FieldT<249, FIX::LocalMktDate>;
        using LegRepoCollateralSecurityType = FieldT<250, int64_t>;
        using LegRepurchaseTerm = FieldT<251, int64_t>;
        using LegRepurchaseRate = FieldT<252, double>;
        using LegFactor = FieldT<253, double>;
        using LegRedemptionDate = FieldT<254, FIX::LocalMktDate>;
        using CreditRating = FieldT<255, std::string>;
        using UnderlyingCreditRating = FieldT<256, std::string>;
        using LegCreditRating = FieldT<257, std::string>;
        using MDReqID = FieldT<262, std::string>;
        using SubscriptionRequestType = FieldT<263, char>;
        using MarketDepth = FieldT<264, int64_t>;
        using MDUpdateType = FieldT<265, int64_t>;
        using AggregatedBook = FieldT<266, bool>;
        using NoMDEntryTypes = FieldT<267, int64_t>;
        using NoMDEntries = FieldT<268, int64_t>;
        using MDEntryType = FieldT<269, char>;
        using MDEntryPx = FieldT<270, FIX::Price>;
        using MDEntrySize = FieldT<271, FIX::Qty>;
        using MDEntryDate = FieldT<272, FIX::UTCDate>;
        using MDEntryTime = FieldT<273, FIX::UTCTimeOnly>;
        using TickDirection = FieldT<274, char>;
        using MDMkt = FieldT<275, std::string>;
        using QuoteCondition = FieldT<276, FIX::MultipleValueString>;
        using TradeCondition = FieldT<277, FIX::MultipleValueString>;
        using MDEntryID = FieldT<278, std::string>;
        using MDUpdateAction = FieldT<279, char>;
        using MDEntryRefID = FieldT<280, std::string>;
        using MDReqRejReason = FieldT<281, char>;
        using MDEntryOriginator = FieldT<282, std::string>;
        using LocationID = FieldT<283, std::string>;
        using DeskID = FieldT<284, std::string>;
        using DeleteReason = FieldT<285, char>;
        using OpenCloseSettleFlag = FieldT<286, char>;
        using SellerDays = FieldT<287, int64_t>;
        using MDEntryBuyer = FieldT<288, std::string>;
        using MDEntrySeller = FieldT<289, std::string>;
        using MDEntryPositionNo = FieldT<290, int64_t>;
        using FinancialStatus = FieldT<291, char>;
        using CorporateAction = FieldT<292, char>;
        using DefBidSize = FieldT<293, FIX::Qty>;
        using DefOfferSize = FieldT<294, FIX::Qty>;
        using NoQuoteEntries = FieldT<295, int64_t>;
        using NoQuoteSets = FieldT<296, int64_t>;
        using QuoteAckStatus = FieldT<297, int64_t>;
        using QuoteCancelType = FieldT<298, int64_t>;
        using QuoteEntryID = FieldT<299, std::string>;
        using QuoteRejectReason = FieldT<300, int64_t>;
        using QuoteResponseLevel = FieldT<301, int64_t>;
        using QuoteSetID = FieldT<302, std::string>;
        using QuoteRequestType = FieldT<303, int64_t>;
        using TotQuoteEntries = FieldT<304, int64_t>;
        using UnderlyingIDSource = FieldT<305, std::string>;
        using UnderlyingIssuer = FieldT<306, std::string>;
        using UnderlyingSecurityExchange = FieldT<308, std::string>;
        using UnderlyingSecurityID = FieldT<309, std::string>;
        using UnderlyingSecurityDesc = FieldT<307, std::string>;
        using UnderlyingSecurityType = FieldT<310, std::string>;
        using UnderlyingSymbol = FieldT<311, std::string>;
        using UnderlyingSymbolSfx = FieldT<312, std::string>;
        using UnderlyingMaturityMonthYear = FieldT<313, std::string>;
        //using UnderlyingMaturityDay = FieldT<314, FIX::MultipleValueString>;
        using UnderlyingPutOrCall = FieldT<315, int64_t>;
        using UnderlyingStrikePrice = FieldT<316, FIX::Price>;
        using UnderlyingOptAttribute = FieldT<317, char>;
        using UnderlyingCurrency = FieldT<318, std::string>;
        using RatioQty = FieldT<319, FIX::Qty>;
        using SecurityReqID = FieldT<320, std::string>;
        using SecurityRequestType = FieldT<321, int64_t>;
        using SecurityResponseID = FieldT<322, std::string>;
        using SecurityResponseType = FieldT<323, int64_t>;
        using SecurityStatusReqID = FieldT<324, std::string>;
        using UnsolicitedIndicator = FieldT<325, bool>;
        using SecurityTradingStatus = FieldT<326, int64_t>;
        using HaltReasonChar = FieldT<327, char>;
        using InViewOfCommon = FieldT<328, bool>;
        using DueToRelated = FieldT<329, bool>;
        using BuyVolume = FieldT<330, FIX::Qty>;
        using SellVolume = FieldT<331, FIX::Qty>;
        using HighPx = FieldT<332, FIX::Price>;
        using LowPx = FieldT<333, FIX::Price>;
        using Adjustment = FieldT<334, int64_t>;
        using TradSesReqID = FieldT<335, std::string>;
        using TradingSessionID = FieldT<336, std::string>;
        using ContraTrader = FieldT<337, std::string>;
        using TradSesMethod = FieldT<338, int64_t>;
        using TradSesMode = FieldT<339, int64_t>;
        using TradSesStatus = FieldT<340, int64_t>;
        using TradSesStartTime = FieldT<341, FIX::UTCTimestamp>;
        using TradSesOpenTime = FieldT<342, FIX::UTCTimestamp>;
        using TradSesPreCloseTime = FieldT<343, FIX::UTCTimestamp>;
        using TradSesCloseTime = FieldT<344, FIX::UTCTimestamp>;
        using TradSesEndTime = FieldT<345, FIX::UTCTimestamp>;
        using NumberOfOrders = FieldT<346, int64_t>;
        using MessageEncoding = FieldT<347, std::string>;
        using EncodedIssuerLen = FieldT<348, int64_t>;
        using EncodedIssuer = FieldT<349, FIX::Data>;
        using EncodedSecurityDescLen = FieldT<350, int64_t>;
        using EncodedSecurityDesc = FieldT<351, FIX::Data>;
        using EncodedListExecInstLen = FieldT<352, int64_t>;
        using EncodedListExecInst = FieldT<353, FIX::Data>;
        using EncodedTextLen = FieldT<354, int64_t>;
        using EncodedText = FieldT<355, FIX::Data>;
        using EncodedSubjectLen = FieldT<356, int64_t>;
        using EncodedSubject = FieldT<357, FIX::Data>;
        using EncodedHeadlineLen = FieldT<358, int64_t>;
        using EncodedHeadline = FieldT<359, FIX::Data>;
        using EncodedAllocTextLen = FieldT<360, int64_t>;
        using EncodedAllocText = FieldT<361, FIX::Data>;
        using EncodedUnderlyingIssuerLen = FieldT<362, int64_t>;
        using EncodedUnderlyingIssuer = FieldT<363, FIX::Data>;
        using EncodedUnderlyingSecurityDescLen = FieldT<364, int64_t>;
        using EncodedUnderlyingSecurityDesc = FieldT<365, FIX::Data>;
        using AllocPrice = FieldT<366, FIX::Price>;
        using QuoteSetValidUntilTime = FieldT<367, FIX::UTCTimestamp>;
        using QuoteEntryRejectReason = FieldT<368, int64_t>;
        using LastMsgSeqNumProcessed = FieldT<369, int64_t>;
        using OnBehalfOfSendingTime = FieldT<370, FIX::UTCTimestamp>; 
        using RefTagID = FieldT<371, int64_t>;
        using RefMsgType = FieldT<372, std::string>;
        using SessionRejectReason = FieldT<373, int64_t>;
        using BidRequestTransType = FieldT<374, char>;
        using ContraBroker = FieldT<375, std::string>;
        using ComplianceID = FieldT<376, std::string>;
        using SolicitedFlag = FieldT<377, bool>;
        using ExecRestatementReason = FieldT<378, int64_t>;
        using BusinessRejectRefID = FieldT<379, std::string>;
        using BusinessRejectReason = FieldT<380, int64_t>;
        using GrossTradeAmt = FieldT<381, double>;
        using NoContraBrokers = FieldT<382, int64_t>;
        using MaxMessageSize = FieldT<383, int64_t>;
        using NoMsgTypes = FieldT<384, int64_t>;
        using MsgDirection = FieldT<385, char>;
        using NoTradingSessions = FieldT<386, int64_t>;
        using TotalVolumeTraded = FieldT<387, FIX::Qty>;
        using DiscretionInst = FieldT<388, char>;
        using DiscretionOffset = FieldT<389, FIX::Price>;
        using BidID = FieldT<390, std::string>;
        using ClientBidID = FieldT<391, std::string>;
        using ListName = FieldT<392, std::string>;
        using TotNoRelatedSym = FieldT<393, int64_t>;
        using BidType = FieldT<394, int64_t>;
        using NumTickets = FieldT<395, int64_t>;
        using SideValue1 = FieldT<396, FIX::Amt>;
        using SideValue2 = FieldT<397, FIX::Amt>;
        using NoBidDescriptors = FieldT<398, int64_t>;
        using BidDescriptorType = FieldT<399, int64_t>;
        using BidDescriptor = FieldT<400, std::string>;
        using SideValueInd = FieldT<401, int64_t>;
        using LiquidityPctLow = FieldT<402, double>;
        using LiquidityPctHigh = FieldT<403, double>;
        using LiquidityValue = FieldT<404, FIX::Amt>;
        using EFPTrackingError = FieldT<405, double>;
        using FairValue = FieldT<406, FIX::Amt>;
        using OutsideIndexPct = FieldT<407, double>;
        using ValueOfFutures = FieldT<408, FIX::Amt>;
        using LiquidityIndType = FieldT<409, int64_t>;
        using WtAverageLiquidity = FieldT<410, double>;
        using ExchangeForPhysical = FieldT<411, bool>;
        using OutMainCntryUIndex = FieldT<412, FIX::Amt>;
        using CrossPercent = FieldT<413, double>;
        using ProgRptReqs = FieldT<414, int64_t>;
        using ProgPeriodInterval = FieldT<415, int64_t>;
        using IncTaxInd = FieldT<416, int64_t>;
        using NumBidders = FieldT<417, int64_t>;
        using TradeType = FieldT<418, char>;
        using BasisPxType = FieldT<419, char>;
        using NoBidComponents = FieldT<420, int64_t>;
        using Country = FieldT<421, std::string>;
        using TotNoStrikes = FieldT<422, int64_t>;
        using PriceType = FieldT<423, int64_t>;
        using DayOrderQty = FieldT<424, double>;
        using DayCumQty = FieldT<425, double>;
        using DayAvgPx = FieldT<426, double>;
        using GTBookingInst = FieldT<427, int64_t>;
        using NoStrikes = FieldT<428, int64_t>;
        using ListStatusType = FieldT<429, int64_t>;
        using NetGrossInd = FieldT<430, int64_t>;
        using ListOrderStatus = FieldT<431, int64_t>;
        using ExpireDate = FieldT<432, std::string>;
        using ListExecInstType = FieldT<433, char>;
        using CxlRejResponseTo = FieldT<434, char>;
        using UnderlyingCouponRate = FieldT<435, double>;
        using UnderlyingContractMultiplier = FieldT<436, double>;
        using ContraTradeQty = FieldT<437, double>;
        using ContraTradeTime = FieldT<438, FIX::UTCTimestamp>;
        using ClearingFirm = FieldT<439, std::string>;
        using ClearingAccount = FieldT<440, std::string>;
        using LiquidityNumSecurities = FieldT<441, int64_t>;
        using MultiLegReportingType = FieldT<442, char>;
        using StrikeTime = FieldT<443, FIX::UTCTimestamp>;
        using ListStatusText = FieldT<444, std::string>;
        using EncodedListStatusTextLen = FieldT<445, int64_t>;
        using EncodedListStatusText = FieldT<446, FIX::Data>;
        using PartyIDSource = FieldT<447, char>;
        using PartyID = FieldT<448, std::string>;
        using NetChgPrevDay = FieldT<451, double>;
        using PartyRole = FieldT<452, int64_t>;
        using NoSecurityAltID = FieldT<454, int64_t>;
        using SecurityAltID = FieldT<455, std::string>;
        using SecurityAltIDSource = FieldT<456, std::string>;
        using NoUnderlyingSecurityAltID = FieldT<457, int64_t>;
        using UnderlyingSecurityAltID = FieldT<458, std::string>;
        using UnderlyingSecurityAltIDSource = FieldT<459, std::string>;
        using Product = FieldT<460, int64_t>;
        using CFICode = FieldT<461, std::string>;
        using UnderlyingProduct = FieldT<462, int64_t>;
        using UnderlyingCFICode = FieldT<463, std::string>;
        using TestMessageIndicator = FieldT<464, bool>;
        using BookingRefID = FieldT<466, std::string>;
        using IndividualAllocID = FieldT<467, std::string>;
        using RoundingDirection = FieldT<468, char>;
        using RoundingModulus = FieldT<469, float>;
        using CountryOfIssue = FieldT<470, Country>;
        using StateOrProvinceOfIssue = FieldT<471, std::string>;
        using LocaleOfIssue = FieldT<472, std::string>;
        using NoRegistDtls = FieldT<473, FIX::NumInGroup>;
        using MailingDtls = FieldT<474, std::string>;
        using InvestorCountryOfResidence = FieldT<475, Country>;
        using PaymentRef = FieldT<476, std::string>;
        using DistribPaymentMethod = FieldT<477, int64_t>;
        using CashDistribCurr = FieldT<478, Currency>;
        using CommCurrency = FieldT<479, Currency>;
        using CancellationRights = FieldT<480, char>;
        using MoneyLaunderingStatus = FieldT<481, char>;
        using MailingInst = FieldT<482, std::string>;
        using TransBkdTime = FieldT<483, FIX::UTCTimestamp>;
        using ExecPriceType = FieldT<484, char>;
        using ExecPriceAdjustment = FieldT<485, float>;
        using DateOfBirth = FieldT<486, FIX::LocalMktDate>;
        using TradeReportTransType = FieldT<487, int64_t>;
        using CardHolderName = FieldT<488, std::string>;
        using CardNumber = FieldT<489, std::string>;
        using CardExpDate = FieldT<490, FIX::LocalMktDate>;
        using CardIssNum = FieldT<491, std::string>;
        using PaymentMethod = FieldT<492, int64_t>;
        using RegistAcctType = FieldT<493, std::string>;
        using Designation = FieldT<494, std::string>;
        using TaxAdvantageType = FieldT<495, int64_t>;
        using RegistRejReasonText = FieldT<496, std::string>;
        using FundRenewWaiv = FieldT<497, char>;
        using CashDistribAgentName = FieldT<498, std::string>;
        using CashDistribAgentCode = FieldT<499, std::string>;
        using CashDistribAgentAcctNumber = FieldT<500, std::string>;
        using CashDistribPayRef = FieldT<501, std::string>;
        using CashDistribAgentAcctName = FieldT<502, std::string>;
        using CardStartDate = FieldT<503, FIX::LocalMktDate>;
        using PaymentDate = FieldT<504, FIX::LocalMktDate>;
        using PaymentRemitterID = FieldT<505, std::string>;
        using RegistStatus = FieldT<506, char>;
        using RegistRejReasonCode = FieldT<507, int64_t>;
        using RegistRefID = FieldT<508, std::string>;
        using RegistDtls = FieldT<509, std::string>;
        using NoDistribInsts = FieldT<510, FIX::NumInGroup>;
        using RegistEmail = FieldT<511, std::string>;
        using DistribPercentage = FieldT<512, FIX::Percentage>;
        using RegistID = FieldT<513, std::string>;
        using RegistTransType = FieldT<514, char>;
        using ExecValuationPoint = FieldT<515, FIX::UTCTimestamp>;
        using OrderPercent = FieldT<516, FIX::Percentage>;
        using OwnershipType = FieldT<517, char>;
        using NoContAmts = FieldT<518, FIX::NumInGroup>;
        using ContAmtType = FieldT<519, int64_t>;
        using ContAmtValue = FieldT<520, float>;
        using ContAmtCurr = FieldT<521, Currency>;
        using OwnerType = FieldT<522, int64_t>;
        using PartySubID = FieldT<523, std::string>;
        using NestedPartyID = FieldT<524, std::string>;
        using NestedPartyIDSource = FieldT<525, char>;
        using SecondaryClOrdID = FieldT<526, std::string>;
        using SecondaryExecID = FieldT<527, std::string>;
        using OrderCapacity = FieldT<528, char>;
        using OrderRestrictions = FieldT<529, FIX::MultipleCharValue>;
        using MassCancelRequestType = FieldT<530, char>;
        using MassCancelResponse = FieldT<531, char>;
        using MassCancelRejectReason = FieldT<532, int64_t>;
        using TotalAffectedOrders = FieldT<533, int64_t>;
        using NoAffectedOrders = FieldT<534, FIX::NumInGroup>;
        using AffectedOrderID = FieldT<535, std::string>;
        using AffectedSecondaryOrderID = FieldT<536, std::string>;
        using QuoteType = FieldT<537, int64_t>;
        using NestedPartyRole = FieldT<538, int64_t>;
        using NoNestedPartyIDs = FieldT<539, FIX::NumInGroup>;
        using TotalAccruedInterestAmt = FieldT<540, FIX::Amt>;
        using MaturityDate = FieldT<541, FIX::LocalMktDate>;
        using UnderlyingMaturityDate = FieldT<542, FIX::LocalMktDate>;
        using InstrRegistry = FieldT<543, std::string>;
        using CashMargin = FieldT<544, char>;
        using NestedPartySubID = FieldT<545, std::string>;
        using Scope = FieldT<546, FIX::MultipleCharValue>;
        using MDImplicitDelete = FieldT<547, bool>;
        using CrossID = FieldT<548, std::string>;
        using CrossType = FieldT<549, int64_t>;
        using CrossPrioritization = FieldT<550, int64_t>;
        using OrigCrossID = FieldT<551, std::string>;
        using NoSides = FieldT<552, FIX::NumInGroup>;
        using Username = FieldT<553, std::string>;
        using Password = FieldT<554, std::string>;
        using NoLegs = FieldT<555, FIX::NumInGroup>;
        using LegCurrency = FieldT<556, Currency>;
        using TotNoSecurityTypes = FieldT<557, int64_t>;
        using NoSecurityTypes = FieldT<558, FIX::NumInGroup>;
        using SecurityListRequestType = FieldT<559, int64_t>;
        using SecurityRequestResult = FieldT<560, int64_t>;
        using RoundLot = FieldT<561, FIX::Qty>;
        using MinTradeVol = FieldT<562, FIX::Qty>;
        using MultiLegRptTypeReq = FieldT<563, int64_t>;
        using LegPositionEffect = FieldT<564, char>;
        using LegCoveredOrUncovered = FieldT<565, int64_t>;
        using LegPrice = FieldT<566, FIX::Price>;
        using TradSesStatusRejReason = FieldT<567, int64_t>;
        using TradeRequestID = FieldT<568, std::string>;
        using TradeRequestType = FieldT<569, int64_t>;
        using PreviouslyReported = FieldT<570, bool>;
        using TradeReportID = FieldT<571, std::string>;
        using TradeReportRefID = FieldT<572, std::string>;
        using MatchStatus = FieldT<573, char>;
        using MatchType = FieldT<574, std::string>;
        using OddLot = FieldT<575, bool>;
        using NoClearingInstructions = FieldT<576, FIX::NumInGroup>;
        using ClearingInstruction = FieldT<577, int64_t>;
        using TradeInputSource = FieldT<578, std::string>;
        using TradeInputDevice = FieldT<579, std::string>;
        using NoDates = FieldT<580, FIX::NumInGroup>;
        using AccountType = FieldT<581, int64_t>;
        using CustOrderCapacity = FieldT<582, int64_t>;
        using ClOrdLinkID = FieldT<583, std::string>;
        using MassStatusReqID = FieldT<584, std::string>;
        using MassStatusReqType = FieldT<585, int64_t>;
        using OrigOrdModTime = FieldT<586, FIX::UTCTimestamp>;
        using LegSettlType = FieldT<587, char>;
        using LegSettlDate = FieldT<588, FIX::LocalMktDate>;
        using DayBookingInst = FieldT<589, char>;
        using BookingUnit = FieldT<590, char>;
        using PreallocMethod = FieldT<591, char>;
        using UnderlyingCountryOfIssue = FieldT<592, Country>;
        using UnderlyingStateOrProvinceOfIssue = FieldT<593, std::string>;
        using UnderlyingLocaleOfIssue = FieldT<594, std::string>;
        using UnderlyingInstrRegistry = FieldT<595, std::string>;
        using LegCountryOfIssue = FieldT<596, Country>;
        using LegStateOrProvinceOfIssue = FieldT<597, std::string>;
        using LegLocaleOfIssue = FieldT<598, std::string>;
        using LegInstrRegistry = FieldT<599, std::string>;
        using LegSymbol = FieldT<600, std::string>;
        using LegSymbolSfx = FieldT<601, std::string>;
        using LegSecurityID = FieldT<602, std::string>;
        using LegSecurityIDSource = FieldT<603, std::string>;
        using NoLegSecurityAltID = FieldT<604, FIX::NumInGroup>;
        using LegSecurityAltID = FieldT<605, std::string>;
        using LegSecurityAltIDSource = FieldT<606, std::string>;
        using LegProduct = FieldT<607, int64_t>;
        using LegCFICode = FieldT<608, std::string>;
        using LegSecurityType = FieldT<609, std::string>;
        using LegMaturityMonthYear = FieldT<610, FIX::MonthYear>;
        using LegMaturityDate = FieldT<611, FIX::LocalMktDate>;
        using LegStrikePrice = FieldT<612, FIX::Price>;
        using LegOptAttribute = FieldT<613, char>;
        using LegContractMultiplier = FieldT<614, float>;
        using LegCouponRate = FieldT<615, FIX::Percentage>;
        using LegIssuer = FieldT<617, std::string>;
        using LegSecurityDesc = FieldT<620, std::string>;
        using LegRatioQty = FieldT<623, float>;
        using LegSide = FieldT<624, char>;
        using TradingSessionSubID = FieldT<625, std::string>;
        using AllocType = FieldT<626, int64_t>;
        using NoHops = FieldT<627, FIX::NumInGroup>;
        using HopCompID = FieldT<628, std::string>;
        using HopSendingTime = FieldT<629, FIX::UTCTimestamp>;
        using HopRefID = FieldT<630, FIX::SeqNum>;
        using MidPx = FieldT<631, FIX::Price>;
        using BidYield = FieldT<632, FIX::Percentage>;
        using MidYield = FieldT<633, FIX::Percentage>;
        using OfferYield = FieldT<634, FIX::Percentage>;
        using ClearingFeeIndicator = FieldT<635, std::string>;
        using WorkingIndicator = FieldT<636, bool>;
        using LegLastPx = FieldT<637, FIX::Price>;
        using PriorityIndicator = FieldT<638, int64_t>;
        using PriceImprovement = FieldT<639, FIX::PriceOffset>;
        using Price2 = FieldT<640, FIX::Price>;
        using LastForwardPoints2 = FieldT<641, FIX::PriceOffset>;
        using BidForwardPoints2 = FieldT<642, FIX::PriceOffset>;
        using OfferForwardPoints2 = FieldT<643, FIX::PriceOffset>;
        using RFQReqID = FieldT<644, std::string>;
        using MktBidPx = FieldT<645, FIX::Price>;
        using MktOfferPx = FieldT<646, FIX::Price>;
        using MinBidSize = FieldT<647, FIX::Qty>;
        using MinOfferSize = FieldT<648, FIX::Qty>;
        using QuoteStatusReqID = FieldT<649, std::string>;
        using LegalConfirm = FieldT<650, bool>;
        using UnderlyingLastPx = FieldT<651, FIX::Price>;
        using UnderlyingLastQty = FieldT<652, FIX::Qty>;
        using LegRefID = FieldT<654, std::string>;
        using ContraLegRefID = FieldT<655, std::string>;
        using SettlCurrBidFxRate = FieldT<656, float>;
        using SettlCurrOfferFxRate = FieldT<657, float>;
        using QuoteRequestRejectReason = FieldT<658, int64_t>;
        using SideComplianceID = FieldT<659, std::string>;
        using AcctIDSource = FieldT<660, int64_t>;
        using AllocAcctIDSource = FieldT<661, int64_t>;
        using BenchmarkPrice = FieldT<662, FIX::Price>;
        using BenchmarkPriceType = FieldT<663, int64_t>;
        using ConfirmID = FieldT<664, std::string>;
        using ConfirmStatus = FieldT<665, int64_t>;
        using ConfirmTransType = FieldT<666, int64_t>;
        using ContractSettlMonth = FieldT<667, FIX::MonthYear>;
        using DeliveryForm = FieldT<668, int64_t>;
        using LastParPx = FieldT<669, FIX::Price>;
        using NoLegAllocs = FieldT<670, FIX::NumInGroup>;
        using LegAllocAccount = FieldT<671, std::string>;
        using LegIndividualAllocID = FieldT<672, std::string>;
        using LegAllocQty = FieldT<673, FIX::Qty>;
        using LegAllocAcctIDSource = FieldT<674, std::string>;
        using LegSettlCurrency = FieldT<675, Currency>;
        using LegBenchmarkCurveCurrency = FieldT<676, Currency>;
        using LegBenchmarkCurveName = FieldT<677, std::string>;
        using LegBenchmarkCurvePoint = FieldT<678, std::string>;
        using LegBenchmarkPrice = FieldT<679, FIX::Price>;
        using LegBenchmarkPriceType = FieldT<680, int64_t>;
        using LegBidPx = FieldT<681, FIX::Price>;
        using LegIOIQty = FieldT<682, std::string>;
        using NoLegStipulations = FieldT<683, FIX::NumInGroup>;
        using LegOfferPx = FieldT<684, FIX::Price>;
        using LegOrderQty = FieldT<685, FIX::Qty>;
        using LegPriceType = FieldT<686, int64_t>;
        using LegQty = FieldT<687, FIX::Qty>;
        using LegStipulationType = FieldT<688, std::string>;
        using LegStipulationValue = FieldT<689, std::string>;
        using LegSwapType = FieldT<690, int64_t>;
        using Pool = FieldT<691, std::string>;
        using QuotePriceType = FieldT<692, int64_t>;
        using QuoteRespID = FieldT<693, std::string>;
        using QuoteRespType = FieldT<694, int64_t>;
        using QuoteQualifier = FieldT<695, char>;
        using YieldRedemptionDate = FieldT<696, FIX::LocalMktDate>;
        using YieldRedemptionPrice = FieldT<697, FIX::Price>;
        using YieldRedemptionPriceType = FieldT<698, int64_t>;
        using BenchmarkSecurityID = FieldT<699, std::string>;
        using ReversalIndicator = FieldT<700, bool>;
        using YieldCalcDate = FieldT<701, FIX::LocalMktDate>;
        using NoPositions = FieldT<702, FIX::NumInGroup>;
        using PosType = FieldT<703, std::string>;
        using LongQty = FieldT<704, FIX::Qty>;
        using ShortQty = FieldT<705, FIX::Qty>;
        using PosQtyStatus = FieldT<706, int64_t>;
        using PosAmtType = FieldT<707, std::string>;
        using PosAmt = FieldT<708, FIX::Amt>;
        using PosTransType = FieldT<709, int64_t>;
        using PosReqID = FieldT<710, std::string>;
        using NoUnderlyings = FieldT<711, FIX::NumInGroup>;
        using PosMaintAction = FieldT<712, int64_t>;
        using OrigPosReqRefID = FieldT<713, std::string>;
        using PosMaintRptRefID = FieldT<714, std::string>;
        using ClearingBusinessDate = FieldT<715, FIX::LocalMktDate>;
        using SettlSessID = FieldT<716, std::string>;
        using SettlSessSubID = FieldT<717, std::string>;
        using AdjustmentType = FieldT<718, int64_t>;
        using ContraryInstructionIndicator = FieldT<719, bool>;
        using PriorSpreadIndicator = FieldT<720, bool>;
        using PosMaintRptID = FieldT<721, std::string>;
        using PosMaintStatus = FieldT<722, int64_t>;
        using PosMaintResult = FieldT<723, int64_t>;
        using PosReqType = FieldT<724, int64_t>;
        using ResponseTransportType = FieldT<725, int64_t>;
        using ResponseDestination = FieldT<726, std::string>;
        using TotalNumPosReports = FieldT<727, int64_t>;
        using PosReqResult = FieldT<728, int64_t>;
        using PosReqStatus = FieldT<729, int64_t>;
        using SettlPrice = FieldT<730, FIX::Price>;
        using SettlPriceType = FieldT<731, int64_t>;
        using UnderlyingSettlPrice = FieldT<732, FIX::Price>;
        using UnderlyingSettlPriceType = FieldT<733, int64_t>;
        using PriorSettlPrice = FieldT<734, FIX::Price>;
        using NoQuoteQualifiers = FieldT<735, FIX::NumInGroup>;
        using AllocSettlCurrency = FieldT<736, Currency>;
        using AllocSettlCurrAmt = FieldT<737, FIX::Amt>;
        using InterestAtMaturity = FieldT<738, FIX::Amt>;
        using LegDatedDate = FieldT<739, FIX::LocalMktDate>;
        using LegPool = FieldT<740, std::string>;
        using AllocInterestAtMaturity = FieldT<741, FIX::Amt>;
        using AllocAccruedInterestAmt = FieldT<742, FIX::Amt>;
        using DeliveryDate = FieldT<743, FIX::LocalMktDate>;
        using AssignmentMethod = FieldT<744, char>;
        using AssignmentUnit = FieldT<745, FIX::Qty>;
        using OpenInterest = FieldT<746, FIX::Amt>;
        using ExerciseMethod = FieldT<747, char>;
        using TotNumTradeReports = FieldT<748, int64_t>;
        using TradeRequestResult = FieldT<749, int64_t>;
        using TradeRequestStatus = FieldT<750, int64_t>;
        using TradeReportRejectReason = FieldT<751, int64_t>;
        using SideMultiLegReportingType = FieldT<752, int64_t>;
        using NoPosAmt = FieldT<753, FIX::NumInGroup>;
        using AutoAcceptIndicator = FieldT<754, bool>;
        using AllocReportID = FieldT<755, std::string>;
        using NoNested2PartyIDs = FieldT<756, FIX::NumInGroup>;
        using Nested2PartyID = FieldT<757, std::string>;
        using Nested2PartyIDSource = FieldT<758, char>;
        using Nested2PartyRole = FieldT<759, int64_t>;
        using Nested2PartySubID = FieldT<760, std::string>;
        using BenchmarkSecurityIDSource = FieldT<761, std::string>;
        using SecuritySubType = FieldT<762, std::string>;
        using UnderlyingSecuritySubType = FieldT<763, std::string>;
        using LegSecuritySubType = FieldT<764, std::string>;
        using AllowableOneSidednessValue = FieldT<766, FIX::Amt>;
        using AllowableOneSidednessCurr = FieldT<767, Currency>;
        using NoTrdRegTimestamps = FieldT<768, FIX::NumInGroup>;
        using TrdRegTimestamp = FieldT<769, FIX::UTCTimestamp>;
        using TrdRegTimestampType = FieldT<770, int64_t>;
        using TrdRegTimestampOrigin = FieldT<771, std::string>;
        using ConfirmRefID = FieldT<772, std::string>;
        using ConfirmType = FieldT<773, int64_t>;
        using ConfirmRejReason = FieldT<774, int64_t>;
        using BookingType = FieldT<775, int64_t>;
        using IndividualAllocRejCode = FieldT<776, int64_t>;
        using SettlInstMsgID = FieldT<777, std::string>;
        using NoSettlInst = FieldT<778, FIX::NumInGroup>;
        using LastUpdateTime = FieldT<779, FIX::UTCTimestamp>;
        using AllocSettlInstType = FieldT<780, int64_t>;
        using NoSettlPartyIDs = FieldT<781, FIX::NumInGroup>;
        using SettlPartyID = FieldT<782, std::string>;
        using SettlPartyIDSource = FieldT<783, char>;
        using SettlPartyRole = FieldT<784, int64_t>;
        using SettlPartySubID = FieldT<785, std::string>;
        using SettlPartySubIDType = FieldT<786, int64_t>;
        using DlvyInstType = FieldT<787, char>;
        using TerminationType = FieldT<788, int64_t>;
        using NextExpectedMsgSeqNum = FieldT<789, FIX::SeqNum>;
        using OrdStatusReqID = FieldT<790, std::string>;
        using SettlInstReqID = FieldT<791, std::string>;
        using SettlInstReqRejCode = FieldT<792, int64_t>;
        using SecondaryAllocID = FieldT<793, std::string>;
        using AllocReportType = FieldT<794, int64_t>;
        using AllocReportRefID = FieldT<795, std::string>;
        using AllocCancReplaceReason = FieldT<796, int64_t>;
        using CopyMsgIndicator = FieldT<797, bool>;
        using AllocAccountType = FieldT<798, int64_t>;
        using OrderAvgPx = FieldT<799, FIX::Price>;
        using OrderBookingQty = FieldT<800, FIX::Qty>;
        using UnderlyingPx = FieldT<810, FIX::Price>;
        using PriceDelta = FieldT<811, double>;
        using ApplQueueDepth = FieldT<813, int64_t>;
        using ApplQueueResolution = FieldT<814, int64_t>;
        using TargetStrategy = FieldT<847, int64_t>;
        using LastLiquidityInd = FieldT<851, int64_t>;
        using NoEvents = FieldT<864, int64_t>;
        using EventType = FieldT<865, int64_t>;
        using EventDate = FieldT<866, FIX::LocalMktDate>;
        using EventPx = FieldT<867, FIX::Price>;
        using EventText = FieldT<868, std::string>;
        using NoInstrAttrib = FieldT<870, int64_t>;
        using InstrAttribType = FieldT<871, int64_t>;
        using InstrAttribValue = FieldT<872, std::string>;
        using DatedDate = FieldT<873, FIX::LocalMktDate>;
        using InterestAccrualDate = FieldT<874, FIX::LocalMktDate>;
        using CPProgram = FieldT<875, int64_t>;
        using CPRegType = FieldT<876, std::string>;
        using UnderlyingCPProgram = FieldT<877, std::string>;
        using UnderlyingCPRegType = FieldT<878, std::string>;
        using UnderlyingQty = FieldT<879, FIX::Qty>;
        using UnderlyingDirtyPrice = FieldT<882, FIX::Price>;
        using UnderlyingEndPrice = FieldT<883, FIX::Price>;
        using UnderlyingStartValue = FieldT<884, double>;
        using UnderlyingCurrentValue = FieldT<885, double>;
        using UnderlyingEndValue = FieldT<886, double>;
        using NoUnderlyingStips = FieldT<887, int64_t>;
        using UnderlyingStipType = FieldT<888, std::string>;
        using UnderlyingStipValue = FieldT<889, std::string>;
        using LastFragment = FieldT<893, bool>;
        using MarginRatio = FieldT<898, double>;
        using TotNumReports = FieldT<911, int64_t>;
        using LastRptRequested = FieldT<912, bool>;
        using UserRequestID = FieldT<923, std::string>;
        using UserRequestType = FieldT<924, int64_t>;
        using NewPassword = FieldT<925, int64_t>;
        using UserStatus = FieldT<926, int64_t>;
        using UserStatusText = FieldT<927, std::string>;
        using UnderlyingStrikeCurrency = FieldT<941, std::string>;
        using LegStrikeCurrency = FieldT<942, std::string>;
        using StrikeCurrency = FieldT<947, std::string>;
        using LegContractSettlMonth = FieldT<955, std::string>;
        using LegInterestAccrualDate = FieldT<956, std::string>;
        using MinPriceIncrement = FieldT<969, double>;
        using PositionLimit = FieldT<970, double>;
        using SecurityUpdateAction = FieldT<980, char>;
        using MDPriceLevel = FieldT<1023, int64_t>;
        using MDEntryForwardPoints = FieldT<1027, FIX::PriceOffset>;
        using MDQuoteType = FieldT<1070, int64_t>;
        using TriggerPriceType = FieldT<1107, char>;
        using DefaultApplVerID = FieldT<1137, int64_t>;
        using MaxTradeVol = FieldT<1140, double>;
        using EventTime = FieldT<1145, FIX::UTCTimestamp>; 
        using DefaultCstmApplVerID = FieldT<1408, std::string>;
        using MDSecurityTradingStatus = FieldT<1682, int64_t>;
        using CommissionCurrency = FieldT<2643, std::string>;
        using SelfMatchPreventionInstruction = FieldT<2964, int64_t>;
        using OrderCreateTime = FieldT<6616, FIX::UTCTimestamp>;
        using CancelOnDisconnectScope = FieldT<6867, char>;
        using BrokerID = FieldT<7933, std::string>;
        using DefaultSelfTradePreventionStrategy = FieldT<8001, bool>;
        using CancelOrdersOnDisconnect = FieldT<8013, bool>;
        using CancelOrdersOnInternalDisconnect = FieldT<8014, bool>;
        using DefaultMarginRatio = FieldT<21000, double>;
        using AggressorSide = FieldT<2446, int64_t>;
        using StopLimitPx = FieldT<3040, double>;
        using SelfTradePreventionStrategy = FieldT<8000, char>;
        using ExtrimmedSymbol = FieldT<80055, std::string>;
        using BeginExecID = FieldT<22003, std::string>;
        using EndExecID = FieldT<22004, std::string>;
        using ResentEventCount = FieldT<22005, int64_t>;
        using EventResendRejectReason = FieldT<22006, int64_t>;
        using CancelOnDisconnectType = FieldT<35002, int64_t>;
        using DateFrom = FieldT<9883, FIX::UTCTimestamp>;
        using DateTo = FieldT<9884, FIX::UTCTimestamp>;
        using SelfMatchPreventionScope = FieldT<12362, char>;
        using ReqLimit = FieldT<20000, int64_t>;
        using MassStatusReqDataType = FieldT<20001, char>;
        using CODTimeoutWindow = FieldT<35003, int64_t>;
        using MassOrderRequestID = FieldT<2423, std::string>;
        using OrderResponseLevel = FieldT<2427, int64_t>;
        using NoOrderEntries = FieldT<2428, int64_t>;
        using OrderEntryAction = FieldT<2429, int64_t>;
        using TotNoOrderEntries = FieldT<2432, int64_t>;
        using TrdMatchID = FieldT<880, std::string>;
        using TimeToExpiration = FieldT<1189, int64_t>;
        using MDEntryTimeMs = FieldT<10273, std::string>;
        using TakerSide = FieldT<10851, char>;
        using NoAltMDSource = FieldT<816, int64_t>;
        using AltMDSourceID = FieldT<817, int64_t>;
        using ReceiveWindow = FieldT<20100, int64_t>;
        using MatchCount = FieldT<20101, int64_t>;
        using MatchIndex = FieldT<20102, int64_t>;
        using TriggerPrice = FieldT<1102, Price>;
        using SelfMatchPreventionID = FieldT<2362, int64_t>;
        using ExtrimmedSelfMatchPreventionID = FieldT<82362, int64_t>;
        using ExtrimmedSelfMatchPreventionInstruction = FieldT<82964, int64_t>;
        using ExtrimmedSelfMatchPreventionScope = FieldT<92362, char>;
    } // namespace Tag

  }

 #endif  //FIX_TYPES_HPP